// src/validation/userSchema.ts
import * as Yup from "yup";
import { UserRole } from "@/types/users";

// ‚úÖ Reusable validation
const nameValidation = Yup.string()
  .required("T√™n ng∆∞·ªùi d√πng b·∫Øt bu·ªôc nh·∫≠p")
  .min(2, "T√™n ph·∫£i √≠t nh·∫•t 2 k√Ω t·ª±")
  .max(50, "T√™n t·ªëi ƒëa 50 k√Ω t·ª±");

const phoneValidation = Yup.string()
  .matches(/^0\d{9,10}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
  .required("S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc");

const passwordValidation = Yup.string()
  .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
  .notRequired(); // cho ph√©p b·ªè tr·ªëng khi update

const roleValidation = Yup.mixed<UserRole>()
  .oneOf(
    ["Admin", "DealerManager", "DealerStaff", "EVMStaff"],
    "Vai tr√≤ kh√¥ng h·ª£p l·ªá"
  )
  .required("Vui l√≤ng ch·ªçn vai tr√≤");

const statusValidation = Yup.string()
  .oneOf(["active", "inactive"], "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá")
  .required("Tr·∫°ng th√°i b·∫Øt bu·ªôc ch·ªçn");

/** üìò Schema t·∫°o m·ªõi user */
export const createUserSchema = Yup.object().shape({
  email: Yup.string().email("Email kh√¥ng h·ª£p l·ªá").required("Email l√† b·∫Øt bu·ªôc"),
  password: Yup.string()
    .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
    .required("M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc"),
  role: Yup.string()
    .oneOf(
      ["Admin", "DealerManager", "DealerStaff", "EVMStaff"],
      "Vai tr√≤ kh√¥ng h·ª£p l·ªá"
    )
    .required("Vai tr√≤ l√† b·∫Øt bu·ªôc"),
  dealer: Yup.string().when("role", {
    is: (role: string) => ["DealerManager", "DealerStaff"].includes(role),
    then: (schema) => schema.required("Vui l√≤ng ch·ªçn ƒë·∫°i l√Ω"),
    otherwise: (schema) => schema.notRequired(),
  }),
  profile: Yup.object().shape({
    name: nameValidation,
    phone: phoneValidation,
  }),
});

/** üìó Schema c·∫≠p nh·∫≠t user */
export const updateUserSchema = Yup.object().shape({
  role: roleValidation,
  dealer: Yup.object({
    _id: Yup.string().required("Vui l√≤ng ch·ªçn ƒë·∫°i l√Ω"),
    name: Yup.string(),
  })
    .nullable()
    .when("role", {
      is: (role: UserRole) =>
        role === "DealerManager" || role === "DealerStaff",
      then: (schema) => schema.required("ƒê·∫°i l√Ω b·∫Øt bu·ªôc v·ªõi vai tr√≤ n√†y"),
      otherwise: (schema) => schema.notRequired().nullable(),
    }),
  profile: Yup.object({
    name: nameValidation,
    phone: phoneValidation,
  }).required(),
  status: statusValidation,
});
