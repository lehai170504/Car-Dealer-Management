"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Quote } from "@/types/quotes";
import { format } from "date-fns";
import { Loader2, Pencil } from "lucide-react";

interface QuoteDetailModalProps {
  quote: Quote | null;
  open: boolean;
  onClose: () => void;
  onEdit: (quote: Quote) => void;
  loading?: boolean;
}

export default function QuoteDetailModal({
  quote,
  open,
  onClose,
  onEdit,
  loading,
}: QuoteDetailModalProps) {
  const labelClass = "text-gray-400 text-sm font-medium";

  if (!quote) return null;

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="bg-gray-900 text-gray-100 max-w-4xl w-full rounded-xl shadow-lg overflow-hidden">
        {/* HEADER */}
        <DialogHeader className="border-b border-gray-700 pb-3">
          <DialogTitle className="text-xl font-semibold flex justify-between items-center">
            <span>Chi ti·∫øt b√°o gi√° #{quote._id}</span>
            <Button
              onClick={() => onEdit(quote)}
              size="sm"
              variant="outline"
              className="border-gray-600 text-gray-200 hover:bg-gray-800 hover:text-white"
            >
              <Pencil className="w-4 h-4 mr-2" /> Ch·ªânh s·ª≠a
            </Button>
          </DialogTitle>
        </DialogHeader>

        {/* BODY */}
        <ScrollArea className="max-h-[75vh] mt-4 pr-2">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 px-1 pb-6">
            {/* ===== C·ªòT TR√ÅI ===== */}
            <div className="space-y-6">
              {/* Kh√°ch h√†ng */}
              <div>
                <label className={labelClass}>Kh√°ch h√†ng</label>
                <div className="bg-gray-800 border border-gray-700 rounded-lg p-3">
                  <div className="font-medium text-gray-100">
                    {quote.customer || "‚Äî"}
                  </div>
                </div>
              </div>

              {/* ƒê·∫°i l√Ω */}
              <div>
                <label className={labelClass}>ƒê·∫°i l√Ω</label>
                <div className="bg-gray-800 border border-gray-700 rounded-lg p-3">
                  <div className="font-medium text-gray-100">
                    {quote.dealer || "‚Äî"}
                  </div>
                </div>
              </div>

              {/* Danh s√°ch xe */}
              <div>
                <label className={labelClass}>Danh s√°ch xe</label>
                <div className="bg-gray-800 border border-gray-700 rounded-lg p-3 space-y-3">
                  {quote.items?.length ? (
                    quote.items.map((item, idx) => (
                      <div
                        key={idx}
                        className="border-b border-gray-700 pb-2 last:border-none"
                      >
                        <div className="flex justify-between text-sm font-medium">
                          <span>
                            üöó Bi·∫øn th·ªÉ:{" "}
                            <span className="text-sky-400">
                              {item.variant || "Kh√¥ng r√µ"}
                            </span>{" "}
                            ‚Äì M√†u:{" "}
                            <span className="text-sky-400">
                              {item.color || "Kh√¥ng r√µ"}
                            </span>
                          </span>
                          <span>SL: {item.qty}</span>
                        </div>
                        <div className="flex justify-between text-sm text-gray-400">
                          <span>
                            ƒê∆°n gi√°: {item.unitPrice.toLocaleString()} ƒë
                          </span>
                          <span>
                            Th√†nh ti·ªÅn:{" "}
                            {(item.qty * item.unitPrice).toLocaleString()} ƒë
                          </span>
                        </div>

                        {item.promotionApplied?.length ? (
                          <div className="text-xs text-green-400 mt-1">
                            ∆Øu ƒë√£i: {item.promotionApplied.join(", ")}
                          </div>
                        ) : null}
                      </div>
                    ))
                  ) : (
                    <div className="text-gray-400 italic">Kh√¥ng c√≥ xe n√†o</div>
                  )}
                </div>
              </div>
            </div>

            {/* ===== C·ªòT PH·∫¢I ===== */}
            <div className="space-y-6">
              {/* Ph√≠ */}
              <div>
                <label className={labelClass}>Ph√≠</label>
                {quote.fees ? (
                  <div className="bg-gray-800 border border-gray-700 rounded-lg p-3 space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span>ƒêƒÉng k√Ω:</span>
                      <span>{quote.fees.registration.toLocaleString()} ƒë</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Bi·ªÉn s·ªë:</span>
                      <span>{quote.fees.plate.toLocaleString()} ƒë</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Giao xe:</span>
                      <span>{quote.fees.delivery.toLocaleString()} ƒë</span>
                    </div>
                  </div>
                ) : (
                  <div className="text-gray-400 italic">Kh√¥ng c√≥ ph√≠</div>
                )}
              </div>

              {/* T·ªïng ph·ª• */}
              <div>
                <label className={labelClass}>T·ªïng ph·ª•</label>
                <div className="bg-gray-800 px-3 py-2 rounded-md border border-gray-700 text-gray-300">
                  {quote.subtotal?.toLocaleString()} ƒë
                </div>
              </div>

              {/* Gi·∫£m gi√° */}
              <div>
                <label className={labelClass}>Gi·∫£m gi√°</label>
                <div className="bg-gray-800 px-3 py-2 rounded-md border border-gray-700 text-gray-300">
                  {quote.discount
                    ? `${quote.discount.toLocaleString()} ƒë`
                    : "‚Äî"}
                </div>
              </div>

              {/* T·ªïng c·ªông */}
              <div>
                <label className={labelClass}>T·ªïng c·ªông</label>
                <div className="bg-gray-800 px-3 py-2 rounded-md border border-gray-700 text-lg font-semibold text-sky-400">
                  {quote.total?.toLocaleString()} ƒë
                </div>
              </div>

              {/* Ng√†y h·∫øt h·∫°n */}
              <div>
                <label className={labelClass}>Ng√†y h·∫øt h·∫°n</label>
                <div className="bg-gray-800 px-3 py-2 rounded-md border border-gray-700 text-gray-300">
                  {quote.validUntil
                    ? format(new Date(quote.validUntil), "dd/MM/yyyy")
                    : "‚Äî"}
                </div>
              </div>

              {/* Tr·∫°ng th√°i */}
              <div>
                <label className={labelClass}>Tr·∫°ng th√°i</label>
                <div
                  className={`bg-gray-800 px-3 py-2 rounded-md border border-gray-700 capitalize font-medium ${
                    quote.status === "completed"
                      ? "text-green-400"
                      : quote.status === "cancelled"
                      ? "text-red-400"
                      : quote.status === "sent"
                      ? "text-yellow-400"
                      : "text-gray-300"
                  }`}
                >
                  {quote.status}
                </div>
              </div>

              {/* Ghi ch√∫ */}
              <div>
                <label className={labelClass}>Ghi ch√∫</label>
                <div className="bg-gray-800 px-3 py-2 rounded-md border border-gray-700">
                  {quote.notes || "‚Äî"}
                </div>
              </div>
            </div>
          </div>
        </ScrollArea>

        {/* FOOTER */}
        <DialogFooter className="border-t border-gray-700 pt-4">
          <Button
            onClick={onClose}
            variant="secondary"
            className="w-full sm:w-auto"
          >
            ƒê√≥ng
          </Button>
        </DialogFooter>

        {/* Loading overlay */}
        {loading && (
          <div className="absolute inset-0 bg-black/60 flex items-center justify-center rounded-xl">
            <Loader2 className="animate-spin w-6 h-6 text-sky-400" />
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
