"use client";

import { useEffect, useState } from "react";
import { dashboardService } from "@/services/dashboard/dashboardService";
import { DashboardSummary, TrendDashboard } from "@/types/dashboard";

interface UseDashboardResult {
  summary: DashboardSummary | null;
  trend: TrendDashboard[];
  loading: boolean;
  error: string | null;
  fetchSummary: () => Promise<void>;
  fetchTrend: (params?: {
    startDate?: string;
    endDate?: string;
  }) => Promise<void>;
}

/** ðŸ“Š Hook quáº£n lÃ½ dashboard data (summary + trend) */
export const useDashboard = (): UseDashboardResult => {
  const [summary, setSummary] = useState<DashboardSummary | null>(null);
  const [trend, setTrend] = useState<TrendDashboard[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  /** Láº¥y tá»•ng quan dashboard */
  const fetchSummary = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await dashboardService.getSummary();
      setSummary(data);
    } catch (err: any) {
      setError(err.message || "KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u tá»•ng quan");
    } finally {
      setLoading(false);
    }
  };

  /** Láº¥y dá»¯ liá»‡u xu hÆ°á»›ng dashboard */
  const fetchTrend = async (params?: {
    startDate?: string;
    endDate?: string;
  }) => {
    setLoading(true);
    setError(null);
    try {
      const data = await dashboardService.getTrend(params);
      setTrend(data);
    } catch (err: any) {
      setError(err.message || "KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u xu hÆ°á»›ng");
    } finally {
      setLoading(false);
    }
  };

  // ðŸŸ¢ Tá»± Ä‘á»™ng load summary khi mount
  useEffect(() => {
    fetchSummary();
  }, []);

  return {
    summary,
    trend,
    loading,
    error,
    fetchSummary,
    fetchTrend,
  };
};
